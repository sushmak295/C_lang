#include<stdio.h>
#define SIZE 40
struct queue {
    int items[SIZE];
    int front;
    int rear;
};

void printQueue(struct queue *q) {
    int i = q->front;

    if(isempty(q)) {
        printf("Queue is empty");
    } else {
        printf("\nQueue contains \n");
        if (q->front==-1)
            return;
        for(i = q->front; i < q->rear + 1; i++) {
                printf("%d ", q->items[i]);
        }
    }    
}
void enqueue(struct queue* q, int value){
    if (q->rear==SIZE-1)
        return;
    else
    {   if (q->front==-1)
            q->front=0;
        q->rear++;
        q->items[q->rear] = value;
    }
}
int dequeue(struct queue* q)
{
    int item;
    if (isempty(q))
        return -1;
    else
    {
        if (q->front==-1)
            q->front=0;
        item=q->items[q->front];
        q->front++;
        if(q->front > q->rear){
            printf("Resetting queue");
            q->front = q->rear = -1;
        }
    }
    return item;   
        
}
int isempty(struct queue* q)
{
    if(q->rear == -1) 
        return 1;
    else 
        return 0;
}
struct queue* create_queue()
{
    struct queue* q =(struct queue*) calloc(1,sizeof(struct queue));    
    q->front=-1;
    q->rear=-1;
    return q; 
}
struct node
{
    int vertex;
    struct node* next;
};
struct graph
{
    int num_vertices;
    int *visited;
    struct node** adjlists;
};
struct node* create_node(int v)
{
    struct node* new_node= (struct node*) calloc(1,sizeof(struct node));
    new_node->vertex=v;
    new_node->next=NULL;
    return new_node;
}
struct graph* create_graph(int vertices)
{
    struct graph* g=(struct graph*) calloc(1,sizeof(struct graph));
    g->num_vertices=vertices;
    g->visited=calloc(vertices , sizeof(int));
    g->adjlists=calloc(vertices , sizeof(struct node*));
    return g;
}
void add_edge(struct graph* g,int src,int dst)
{
    struct node* new_node=create_node(dst);
    new_node->next=g->adjlists[src];
    g->adjlists[src]=new_node;
    
    new_node=create_node(src);
    new_node->next=g->adjlists[dst];
    g->adjlists[dst]=new_node;
        
    
}
void printGraph(struct graph* graph)
{
    int v;
    for (v = 0; v < graph->num_vertices; v++)
    {
        struct node* temp = graph->adjlists[v];
        printf("\n Adjacency list of vertex %d\n ", v);
        while (temp)
        {
            printf("%d -> ", temp->vertex);
            temp = temp->next;
        }
        printf("\n");
    }
}
void bfs(struct graph* graph, int startVertex) {
struct queue* q = create_queue();
    graph->visited[startVertex] = 1;
    enqueue(q, startVertex);
    while(!isempty(q)){
        printQueue(q);
        int currentVertex = dequeue(q);
        printf("Visited %d\n", currentVertex);
    
       struct node* temp = graph->adjlists[currentVertex];
    
       while(temp) {
            int adjVertex = temp->vertex;

            if(graph->visited[adjVertex] == 0){
                graph->visited[adjVertex] = 1;
                enqueue(q, adjVertex);
            }
            temp = temp->next;
       }
    }
}
void DFS(struct graph* graph, int vertex) {
        struct node* adjList = graph->adjlists[vertex];
        struct node* temp = adjList;
        
        graph->visited[vertex] = 1;
        printf("Visited %d \n", vertex);
    
        while(temp!=NULL) {
            int connectedVertex = temp->vertex;
        
            if(graph->visited[connectedVertex] == 0) {
                DFS(graph, connectedVertex);
            }
            temp = temp->next;
        }       
}
int main()
{
    struct graph* graph = create_graph(6);
    add_edge(graph, 0, 1);
   
    add_edge(graph, 0, 2);
    add_edge(graph, 1, 2);
     add_edge(graph, 2, 3);
    
    
    
    DFS(graph, 2);
    return 0;
}
