#include<stdio.h>
struct node
{
    int data;
    struct node *left;
    struct node *right;
};
struct node* newnode(int data)
{
 struct node* new_node= (struct node*) calloc(1,sizeof(struct node));
    new_node->data=data;
    new_node->left=NULL;
    new_node->right=NULL;
    return new_node;
}
int main(void) {
    struct node* root=newnode(1);
    root->left=newnode(2);
    root->right=newnode(3);
     root->left->left  = newnode(4);
    inOrder(root);
    return 0;
}
struct node* insert(struct node* r, int data)
{
    if(r==NULL)
    {
        r = (struct node*) malloc(sizeof(struct node));
        r->data = data;
        r->left = NULL;
        r->right = NULL;
    }
    else if(data < r->data){
        r->left = insert(r->left, data);
    }
    else {
        r->right = insert(r->right, data);
    }
    return r;

}
void inOrder(struct node* r)
{
    if(r!=NULL){
        inOrder(r->left);
        printf("%d ", r->data);
        inOrder(r->right);
    }
}

void preOrder(struct node* r)
{
    if(r!=NULL){
        printf("%d ", r->data);
        preOrder(r->left);
        preOrder(r->right);
    }
}

void postOrder(struct node* r)
{
    if(r!=NULL){
        postOrder(r->left);
        postOrder(r->right);
        printf("%d ", r->data);

    }
}
void storeInorder(Node *root, char arr[], int &i)
{
    if (root == NULL)
    {
        arr[i++] = '$';
        return;
    }
    storeInorder(root->left, arr, i);
    arr[i++] = root->key;
    storeInorder(root->right, arr, i);
}
 
// A utility function to store preorder traversal of tree rooted
// with root in an array arr[]. Note that i is passed as reference
void storePreOrder(Node *root, char arr[], int &i)
{
    if (root == NULL)
    {
        arr[i++] = '$';
        return;
    }
    arr[i++] = root->key;
    storePreOrder(root->left, arr, i);
    storePreOrder(root->right, arr, i);
}
 
/* This function returns true if S is a subtree of T, otherwise false */
bool isSubtree(Node *T, Node *S)
{
    /* base cases */
    if (S == NULL)  return true;
    if (T == NULL)  return false;
 
    // Store Inorder traversals of T and S in inT[0..m-1]
    // and inS[0..n-1] respectively
    int m = 0, n = 0;
    char inT[MAX], inS[MAX];
    storeInorder(T, inT, m);
    storeInorder(S, inS, n);
    inT[m] = '\0', inS[n] = '\0';
 
    // If inS[] is not a substring of preS[], return false
    if (strstr(inT, inS) == NULL)
        return false;
 
    // Store Preorder traversals of T and S in inT[0..m-1]
    // and inS[0..n-1] respectively
    m = 0, n = 0;
    char preT[MAX], preS[MAX];
    storePreOrder(T, preT, m);
    storePreOrder(S, preS, n);
    preT[m] = '\0', preS[n] = '\0';
 
    // If inS[] is not a substring of preS[], return false
    // Else return true
    return (strstr(preT, preS) != NULL);
}
int addBT(Node* root)
{
    if (root == NULL)
        return 0;
    return (root->key + addBT(root->left) + addBT(root->right));
}
void sumOfParentOfX(Node* root, int& sum, int x)
{
    // if root == NULL
    if (!root)
        return;     
    // if left or right child of root is 'x', then
    // add the root's data to 'sum'
    if ((root->left && root->left->data == x) ||
        (root->right && root->right->data == x))
        sum += root->data;
     
    // recursively find the required parent nodes
    // in the left and right subtree    
    sumOfParentOfX(root->left, sum, x);
    sumOfParentOfX(root->right, sum, x);
     
}
 
// utility function to find the sum of all
// the parent nodes having child node x
int sumOfParentOfXUtil(Node* root, int x)
{
    int sum = 0;
    sumOfParentOfX(root, sum, x);
     
    // required sum of parent nodes
    return sum;
}
int maxDepth(struct node* node) 
{
   if (node==NULL) 
       return 0;
   else
   {
       /* compute the depth of each subtree */
       int lDepth = maxDepth(node->left);
       int rDepth = maxDepth(node->right);
 
       /* use the larger one */
       if (lDepth > rDepth) 
           return(lDepth+1);
       else return(rDepth+1);
   }
}
bool isFullTree (struct Node* root)
{
    // If empty tree
    if (root == NULL)
        return true;
 
    // If leaf node
    if (root->left == NULL && root->right == NULL)
        return true;
 
    // If both left and right are not NULL, and left & right subtrees
    // are full
    if ((root->left) && (root->right))
        return (isFullTree(root->left) && isFullTree(root->right));
 
    // We reach here when none of the above if conditions work
    return false;
}

/* AVL Tree
#include<stdio.h>
struct node
{
    int val;
    struct node* left;
    struct node* right;
    int height=0;
};
int max(int a,int b)
{
    return (a>b?a:b); 
}
int height(struct node* n)
{
    if(n==NULL)
        return -1;
    return (n->height);
}
struct node* addnode(int value)
{
    struct node* newnode=calloc(1,sizeof(struct node));
    newnode->key=value;
    newnode->right=NULL;
    newnode->left=NULL;
    newnode->height=0;
    return newnode;
}
struct node* rightrotate(struct node* y)
{
    struct node* x=y->left;
    struct node* T2=x->right;
   
    x->right=y;
     y->left=T2;
    y->height=max(height(y->left),height(y>right))+1;
    x->height=max(height(x->left),height(x->right))+1;
    return x;
}
struct node* leftrotate(struct node* x)
{
    struct node* y=x->right;
    struct node* T2=y->left;
   
    
     y->left=x;
    x->right=T2;
    y->height=max(height(y->left),height(y>right))+1;
    x->height=max(height(x->left),height(x->right))+1;
    return y;
}
int getBalance(struct node *N)
{
    if (N == NULL)
        return -1;
    return height(N->left) - height(N->right);
}
struct Node * minvaluenode(struct Node* node)
{
    struct Node* current = node;
 
    /* loop down to find the leftmost leaf */
/*
    while (current->left != NULL)
        current = current->left;
 
    return current;
}
struct node* insert(struct node* N,int value)
{
    if(N==NULL)
    {
        return newnode(value);
    }
    if (value < N->val)
    {
        N->left= insert(N->left,value);
    }
    else if (value>N->val)
    {
        N->right=insert(N->right,value);
    }
    else
        return N;
     N->height = 1 + max(height(N->left),
                           height(N->right));
    int balance=getBalance(N);
    if (balance>1 && value<N->left->value)
    {
       return rightrotate(N);
    }
    else if(balance<-1 && value>N->right->value)
    {
        return leftrotate(N);
    }
    else if(balance>1 && value>N->left->value)
    {
        N->left= leftrotate(N->left);
        return rightrotate(N);
    }
    else if(balance<-1 && value<N->right->value)
    { N->right=rightrotate(N->right);
        return leftrotate(N); 
    }
    return N;
}
struct node* delete(struct node* N,int value)
{
    if(N==NULL)
    {
        return N;
    }
    if (key>N->value)
    {
        N->right=delete(N->right,value);
    }
    if (key<N->value)
    {
        N->left=delete(N->left,value);
    }
    else
    {
        if (N->left==NULL || N->right==NULL)
        {
            struct node* temp=N->left?N->left:N->right;
            if (temp==NULL)
                temp=N;
                N=NULL;
            else
            {*N=*temp;}
            free(temp);
            
        }
        else
        {
            struct node* temp=minvaluenode(N->right);
            N->value=temp->value;
            N->right=delete(N->right,temp->value);
        }
    }
    if(N==NULL)
    {
        return N;
    }
    N->height = 1 + max(height(N->left),
                           height(N->right));
    int balance=getBalance(N);
    if (balance>1 && value<N->left->value)
    {
       return rightrotate(N);
    }
    else if(balance<-1 && value>N->right->value)
    {
        return leftrotate(N);
    }
    else if(balance>1 && value>N->left->value)
    {
        N->left= leftrotate(N->left);
        return rightrotate(N);
    }
    else if(balance<-1 && value<N->right->value)
    { N->right=rightrotate(N->right);
        return leftrotate(N); 
    }
    return N;
}


*/
